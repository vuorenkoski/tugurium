// EXAMPLE CODE FOR ARDUINO
// Program gets values of two sensors from server. Additionally it measures one temperature value itself and sends that to server 
//
// Hardware: 
//   Lolin(Wemos) D1 mini pro, ESP8266
//   Nokia 5110 display
//   Thermistor, 10kohm
//
// Libraries:
//   ESP8266 board: https://arduino-esp8266.readthedocs.io/en/latest/installing.html
//   ArduinoJson (version 6.19.4)
//   Adafruit GFX library (version 1.10.12)
//   Adarfuit PCD8544 Nokia 5110 LCD library (version 1.2.1)

int debug=0;

#include <Arduino.h>
#include <ArduinoJson.h>
StaticJsonDocument<400> doc;

// Wifi
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>
ESP8266WiFiMulti WiFiMulti;

// Nokia5110
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
const int8_t RST_PIN = D8; // D8,15
const int8_t CE_PIN = D4; // D4,2
const int8_t DC_PIN = D6; // D6,12
const int8_t BL_PIN = D0; // D0,16
Adafruit_PCD8544 display = Adafruit_PCD8544(DC_PIN, CE_PIN, RST_PIN);

// Thermistor
const int8_t THERM_PIN = A0;

// Configs
const char* ssid = "xxx";
const char* password = "xx";
String token = "bearer xxx";
string host = "https://tugurium.herokuapp.com/api/graphql"
const int8_t interval = 20; // Measurement interval in minutes
const int8_t samples = 5; // number of samples from thermistor, more takes longer  but is more 'smooth'

double lake = 999;
double out = 999;
double in = 999;

void setup() {
  Serial.begin(115200);
  Serial.println("Started");

  // Init fisplay
  pinMode(BL_PIN, OUTPUT);
  digitalWrite(BL_PIN, HIGH);
  display.begin();
  display.setContrast(60);  // Adjust for your display
  display.clearDisplay();
  display.setTextColor(BLACK);
  display.setTextSize(1);
  
  display.setCursor(0,0);
  display.println("Connecting");
  display.print("SSID: ");
  display.println(ssid);
  display.display();
 
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP(ssid, password);
  while (WiFiMulti.run() != WL_CONNECTED) {
    delay(100);
    display.print(".");
    display.display();
  }
  display.clearDisplay();
  display.println("Connected");
  display.println(WiFi.localIP());
  if (debug) Serial.println("connection ok");
  display.display();
  delay(2000);
  if (debug) Serial.println("Setup complete"); 
}

void loop() {
  lake = getTempFromServer("CLAK");
  out = getTempFromServer("FESP");
  in = measureLocalTemp();
  sendTempToServer("HUPS", in);
  if (debug) {
    Serial.print("lake ");
    Serial.println(lake);
    Serial.print("out ");
    Serial.println(out);
    Serial.print("in ");
    Serial.println(in);
  }
  displayTemps();
  delay(interval*60*1000);
}

void sendTempToServer(String sensor, double value) {
  if ((WiFiMulti.run() == WL_CONNECTED)) {
    std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);
    client->setInsecure();
    HTTPClient https;
    https.useHTTP10(true);

    if (https.begin(*client, host)) {
      https.addHeader("Content-Type","application/json");
      https.addHeader("Authorization",token);
      int httpCode = https.POST("{ \"query\": \"mutation ($sensorName: String!, $value: String) {addMeasurement(sensorName: $sensorName, value: $value) {value}}\", \"variables\": { \"sensorName\": \""+sensor+"\", \"value\": \""+value+"\" }}\r\n");
      if (debug) {
        if (httpCode > 0) {
          Serial.printf("[HTTPS] POST... code: %d\n", httpCode);
        } else {
          Serial.printf("[HTTPS] POST... failed, error: %s\n", https.errorToString(httpCode).c_str());
        }
      }
      https.end();
    } 
  }
}

double getTempFromServer(String sensor) {
  double value = 999;
  if ((WiFiMulti.run() == WL_CONNECTED)) {
    std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);
    client->setInsecure();  
    HTTPClient https;
    https.useHTTP10(true);

    if (https.begin(*client, host)) {
      https.addHeader("Content-Type","application/json");
      https.addHeader("Authorization",token);
      int httpCode = https.POST("{\"query\": \"query SensorDetails($sensorName: String!) {sensorDetails(sensorName: $sensorName) {lastValue}}\", \"variables\":{\"sensorName\": \""+sensor+"\"}}");
      if (httpCode > 0) {
        if (debug) Serial.printf("[HTTPS] POST... code: %d\n", httpCode);
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
          String payload = https.getString();
          if (debug) Serial.println(payload);
          DeserializationError error = deserializeJson(doc, payload);
          if (!error) {
            value = doc["data"]["sensorDetails"]["lastValue"];
          }
        }
      } else {
        if (debug) Serial.printf("[HTTPS] POST... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }
      https.end();
    } 
  }
  return value;
}

double measureLocalTemp() {
  double value;
  double average=0;
  
  for (uint8_t i=0; i< samples; i++) {
    average += analogRead(THERM_PIN);
    delay(200);
  }
  average /= samples;
 
  if (debug==1) {
    Serial.print("Average analog reading ");
    Serial.println(average);
  }
 
  return tempFromThermistorReading(average);
}

double tempFromThermistorReading(int value) {
  int Vo;
  double R1 = 10000;
  double logR2, R2, T;
  double c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;

  R2 = R1 * (1023.0 / (float)value - 1.0);
  logR2 = log(R2);
  T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
  T = T - 273.15;
  return T;
}

// Methods for display
//

// fonts
static const unsigned char PROGMEM plus [] = {12,12,63,63,12,12};
static const unsigned char PROGMEM miinus [] = {12,12,12,12,12,12};
static const unsigned char PROGMEM font [][2][10] = {
{ {0x00, 0xF0, 0xFE, 0x0E, 0x06, 0x06, 0x06, 0xFE, 0xF8, 0x00}, {0x00, 0x07, 0x1F, 0x30, 0x30, 0x30, 0x38, 0x3F, 0x0F, 0x00}},
{ {0x00, 0x00, 0x18, 0x0C, 0x0C, 0xFE, 0xFE, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x30, 0x30, 0x30, 0x3F, 0x3F, 0x30, 0x00, 0x00}}, 
{ {0x00, 0x0C, 0x06, 0x06, 0x06, 0x86, 0xFE, 0x7C, 0x00, 0x00}, {0x00, 0x30, 0x3C, 0x3E, 0x37, 0x33, 0x31, 0x30, 0x30, 0x00}}, 
{ {0x00, 0x0C, 0x06, 0xC6, 0xC6, 0xEE, 0xFE, 0x3C, 0x18, 0x00}, {0x00, 0x18, 0x30, 0x30, 0x30, 0x31, 0x3B, 0x1F, 0x0E, 0x00}}, 
{ {0x00, 0x80, 0xF0, 0x78, 0x1C, 0x06, 0x06, 0xFE, 0xFE, 0x00}, {0x00, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x3F, 0x3F, 0x00}}, 
{ {0x00, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0xE6, 0xC6, 0x00, 0x00}, {0x00, 0x10, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1F, 0x0F, 0x00}}, 
{ {0x00, 0xF0, 0xFC, 0x8C, 0xC6, 0xC6, 0xC6, 0xC6, 0x86, 0x00}, {0x00, 0x0F, 0x1F, 0x39, 0x30, 0x30, 0x30, 0x39, 0x1F, 0x00}}, 
{ {0x00, 0x06, 0x06, 0x06, 0x06, 0xC6, 0xF6, 0x7E, 0x1E, 0x00}, {0x00, 0x00, 0x30, 0x3C, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00}}, 
{ {0x00, 0x38, 0xFC, 0xCE, 0x86, 0x86, 0xCE, 0xFC, 0x38, 0x00}, {0x00, 0x0F, 0x1F, 0x39, 0x30, 0x30, 0x39, 0x1F, 0x0F, 0x00}}, 
{ {0x00, 0x78, 0xFC, 0x86, 0x86, 0x86, 0x86, 0xFE, 0xFC, 0x00}, {0x00, 0x00, 0x30, 0x31, 0x31, 0x31, 0x31, 0x1F, 0x0F, 0x00}}, 
{ {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
};
const unsigned char PROGMEM background [][84] = {
{0x00, 0x00, 0x20, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0x3C, 0x78, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0xFC, 0xFC, 0x40, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

{0x00, 0x00, 0x0C, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x04, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x3C, 0x3F, 0x3F, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

{0x00, 0x00, 0xF8, 0xF8, 0x0C, 0x0C, 0x0C, 0x1C, 0x1C, 0x38, 0xF8, 0x00, 0x00, 0x60, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 
0xFC, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

{0x00, 0x00, 0x03, 0x0F, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x1E, 0x38, 0x38, 0x1E, 0x1F, 
0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

{0x00, 0xFE, 0xFE, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFC, 0x9E, 0x8E, 0xFE, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0xFE, 
0xFE, 0xF0, 0xB8, 0x3C, 0x1E, 0x0E, 0x06, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC4, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 

{0x00, 0x1F, 0x1F, 0x18, 0x18, 0x18, 0x00, 0x00, 0x1F, 0x1F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x1C, 0x00, 0x00, 0x1F, 
0x1F, 0x01, 0x03, 0x03, 0x07, 0x0E, 0x1E, 0x18, 0x00, 0x00, 0x1F, 0x1F, 0x18, 0x38, 0x38, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} 
};

void displyBackground() {
  display.begin();
  display.fillScreen(0);
  display.setRotation(1);
  
  display.drawBitmap(40, 0, background[0], 8, 84, 1);
  display.drawBitmap(32, 0, background[1], 8, 84, 1);
  display.drawBitmap(24, 0, background[2], 8, 84, 1);
  display.drawBitmap(16, 0, background[3], 8, 84, 1);
  display.drawBitmap(8, 0, background[4], 8, 84, 1);
  display.drawBitmap(0, 0, background[5], 8, 84, 1);
  display.display();
}

void displayTemp(double value, int rivi) {
  int absValue;
  int digit1,digit2,digit3;
  if (value<999) {
    if (value<0) {
      display.drawBitmap(50-(rivi*16),44,miinus,8,6,1);
    } else {
      display.drawBitmap(50-(rivi*16),44,plus,8,6,1);
    }
    absValue=(int)(abs(value)*10);
    digit1=absValue/100;
    digit2=(absValue-(digit1*100))/10;
    digit3=absValue-(digit1*100)-(digit2*10);
    if (debug) {
      Serial.print("printout:");
      Serial.print(digit1);
      Serial.print(digit2);
      Serial.println(digit3);
    }
    if (digit1==0) digit1=10; //empty instead of 0
    display.drawBitmap(56-(rivi*16), 51, font[digit1][0], 8, 10, 1);
    display.drawBitmap(48-(rivi*16), 51, font[digit1][1], 8, 10, 1);
    display.drawBitmap(56-(rivi*16), 61, font[digit2][0], 8, 10, 1);
    display.drawBitmap(48-(rivi*16), 61, font[digit2][1], 8, 10, 1);
    display.drawBitmap(56-(rivi*16), 74, font[digit3][0], 8, 10, 1);
    display.drawBitmap(48-(rivi*16), 74, font[digit3][1], 8, 10, 1);
  } else  {
    display.drawBitmap(56-(rivi*16), 51, font[10][0], 8, 10, 1);
    display.drawBitmap(48-(rivi*16), 51, font[10][1], 8, 10, 1);
    display.drawBitmap(56-(rivi*16), 61, font[10][0], 8, 10, 1);
    display.drawBitmap(48-(rivi*16), 61, font[10][1], 8, 10, 1);
    display.drawBitmap(56-(rivi*16), 74, font[10][0], 8, 10, 1);
    display.drawBitmap(48-(rivi*16), 74, font[10][1], 8, 10, 1);
  }
  display.display();
}

void displayTemps() {
  displyBackground();
  displayTemp(in,1);
  displayTemp(out,2);
  displayTemp(lake,3);
}
